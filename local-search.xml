<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>6.824 Introduction</title>
    <link href="/leoforever.github.io/2025/05/04/6-824-Introduction/"/>
    <url>/leoforever.github.io/2025/05/04/6-824-Introduction/</url>
    
    <content type="html"><![CDATA[<h1 id="6-824-Introduction-note"><a href="#6-824-Introduction-note" class="headerlink" title="6.824 Introduction note"></a>6.824 Introduction note</h1><h2 id="Prepare-MapReduce"><a href="#Prepare-MapReduce" class="headerlink" title="Prepare: MapReduce"></a>Prepare: MapReduce</h2><p>MapReduce 是一个编程模型及其相关实现，专为处理和生成大规模数据集而设计。由 Google 的 Jeffrey Dean 和 Sanjay Ghemawat 开发，它通过简化的编程接口使程序员能够轻松利用大型分布式系统的资源，而无需关心并行化、容错、数据分布和负载均衡等复杂细节。</p><p>其编程核心在于两个用户定义函数：</p><ol><li><strong>Map 函数</strong> ：处理输入键&#x2F;值对，生成一组中间键&#x2F;值对</li><li><strong>Reduce 函数</strong> ：合并与同一个中间键关联的所有中间值</li></ol><p><img src="/leoforever.github.io/image/6-824-Introduction/MapReduce.png" alt="MapReduce"></p><h3 id="执行流程："><a href="#执行流程：" class="headerlink" title="执行流程："></a>执行流程：</h3><ol><li>输入数据被分割成 M 个分片，可以并行处理</li><li>程序的一个副本被指定为主节点(master)，其余为工作节点(worker)</li><li>Master 分配 Map 任务和 Reduce 任务给空闲的 worker</li><li>Map worker 处理输入分片，将中间结果存储在本地磁盘</li><li>Reduce worker 从 Map worker 的本地磁盘读取中间数据</li><li>Reduce worker 对中间数据排序，然后执行 Reduce 函数</li><li>所有任务完成后，MapReduce 调用返回到用户程序</li></ol><h3 id="关键特性"><a href="#关键特性" class="headerlink" title="关键特性"></a>关键特性</h3><ol><li>容错机制</li></ol><ul><li><strong>Worker 故障</strong>：Master 定期 ping 每个 worker，如果没有响应，将其标记为失败并重新调度其任务</li><li><strong>Master 故障</strong>：虽然 Master 失败的可能性较低，但可以通过周期性检查点实现恢复</li><li><strong>备份任务</strong>：为解决”掉队者”问题（个别机器异常缓慢），系统会在计算接近完成时为剩余任务安排备份执行，无论是主执行还是备份执行完成，该任务都会被标记为已完成。考虑接近完成阶段一方面是由于木桶效应，另一方面此时 master 可能给该节点安排了新的任务，导致资源竞争。</li></ul><ol start="2"><li>本地性优化</li></ol><ul><li>Master 尝试将 Map 任务调度到包含相应输入数据副本的机器上，这使大多数输入数据可以在本地读取，不消耗网络带宽</li></ul><ol start="3"><li>任务粒度</li></ol><ul><li>Map 阶段分为 M 个部分，Reduce 阶段分为 R 个部分</li><li>理想情况下，M 和 R 应远大于 worker 机器数量</li><li>这有助于动态负载均衡和故障恢复</li></ul><ol start="4"><li>扩展功能</li></ol><ul><li><strong>分区函数</strong>：控制中间键如何分配给 Reduce 任务</li><li><strong>排序保证</strong>：确保每个分区内的中间键&#x2F;值对按键的升序处理</li><li><strong>组合器函数</strong>：在 Map 端执行部分合并，减少网络传输</li><li><strong>跳过错误记录</strong>：允许在某些记录导致确定性崩溃时继续执行</li><li><strong>计数器</strong>：提供计数设施以统计各种</li></ul>]]></content>
    
    
    <categories>
      
      <category>6.824</category>
      
    </categories>
    
    
    <tags>
      
      <tag>6.824</tag>
      
      <tag>Distributed Systems</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
